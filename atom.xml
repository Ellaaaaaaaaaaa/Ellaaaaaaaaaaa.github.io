<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ella&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-08T09:44:30.666Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ella</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LearningNotes</title>
    <link href="http://example.com/2024/03/08/LearningNotes/"/>
    <id>http://example.com/2024/03/08/LearningNotes/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-08T09:44:30.666Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><a href="/LearningNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.mht">数据结构笔记</a></p>]]></content>
    
    
    <summary type="html">大学期间整理的专业课笔记</summary>
    
    
    
    <category term="大学笔记" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二战腾讯</title>
    <link href="http://example.com/2024/03/07/%E4%BA%8C%E6%88%98%E8%85%BE%E8%AE%AF/"/>
    <id>http://example.com/2024/03/07/%E4%BA%8C%E6%88%98%E8%85%BE%E8%AE%AF/</id>
    <published>2024-03-06T16:00:00.000Z</published>
    <updated>2024-03-08T07:15:57.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无笔试，面试初试"><a href="#无笔试，面试初试" class="headerlink" title="无笔试，面试初试"></a><em>无笔试，面试初试</em></h2><p><strong>部门</strong>：技术架构团队(WXG)<br><strong>形式</strong>：视频<br><strong>时长</strong>：一个半小时<br><strong>时间</strong>：2024&#x2F;3&#x2F;8 10:00</p><h3 id="内容回忆"><a href="#内容回忆" class="headerlink" title="内容回忆"></a><em>内容回忆</em></h3><ol><li><p><strong>问了一下项目经历</strong></p><p> <em>我投的是前端岗位，然后揪着我的后端项目问了快20min，我真的忘了我那个后端做的是什么了(感觉越讲越乱，有点崩溃)，我发现面试都喜欢问登录和注册问题</em></p><p> <em>后续面试前还是要把自己所有项目都过一遍，讲清楚业务场景，功能逻辑以及技术栈的使用</em></p></li><li><p><strong>JavaScript</strong></p><p> <em>现在有点后悔，当时JavaScript ES5的语法书只看到了第十三章，只看了DOM和BOM，后面的就没看了，然后八股文也还没来得及看完，面试的时候很多都不会答(叹气)</em></p><p> <em>这里只能先记录一下子问到过的点，我之后重新彻底学一遍</em></p><p> <em><strong>事件循环、runtime、异步(setTimeout、setInterval、promise、async&#x2F;await的区别)、JS底层逻辑、js和浏览器、内存泄露、跨域问题、查错调试、原型链</strong></em></p></li><li><p><strong>Vue.js</strong></p><p> <em>一来先问我为什么要学习vue框架以及怎么学习vue的，项目中遇到的一个难题以及如何解决</em></p><p> <em>这里只能先记录一下子问到过的点，我之后重新彻底学一遍</em></p><p> <em><strong>vue2和vue3的优劣(选项式和组合式API)、vue3的响应式实现、reactive和ref、跨域问题</strong></em></p></li><li><p><strong>算法题</strong></p><p> <em>我最怕的事情还是发生了，算法题刚刚开始练习，js用的都不太顺手，一上来还要手撕代码，我以为手撕完就结束了，结果还要我自己讲解算法逻辑，分析时间复杂度和空间复杂度，看着我写的稀烂的代码，我讲的巨尴尬</em></p><p> <em>题目分为两种，一种是 <em><strong>纯算法</strong></em>，一种是 <em><strong>实现封装函数功能</strong></em></em></p><p> <em>今天一类题是解决配对问题，我曾经好像一年前力扣刷过类似的，但是忘记解法了，当时用的还是C++写的，转换成JS逻辑反应了半天，等我去力扣找一下重新做一下</em></p><p> <em>二类题是实现String里面indexOf方法，reduce方法，bind方法。我写倒是没问题，只是代码风格很偏Java和C++，被评价逻辑是对的，但是不符合语言规范，这里主要是怎么用原型链调用自身我真忘了，写不出来了</em></p></li></ol><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a><em>反思</em></h3><p>整场面试长达一个半小时，两个面试官轮流面试我，我也是第一次参加这种技术面试，有点赶鸭子上架，JS语法、Vue语法还有算法都没准备好，加上面试前一天晚上临时熬到三点，恶补算法，看来用处不大, <em><strong>算法还是要一步一步稳扎稳打的来</strong></em></p><p>JS和vue的基础语法是不可能考的，问的都是比较难的的点，我也知道这些是重要考点但还没来得及复习到或者没理解透(悲)，所以还是要 <em><strong>重新系统的过一遍，把重难点彻底掌握倒背如流</strong></em></p><p>后期还是要整一下自己的 <em><strong>前端项目</strong></em>，不然我的简历上只能放后端项目，还要被揪着问后端问题</p><h4 id="这里放一个本次面试涉及到的知识点汇总，需要重新学过"><a href="#这里放一个本次面试涉及到的知识点汇总，需要重新学过" class="headerlink" title="这里放一个本次面试涉及到的知识点汇总，需要重新学过"></a>这里放一个本次面试涉及到的知识点汇总，需要重新学过</h4><ul><li><input disabled="" type="checkbox"> 事件循环</li><li><input disabled="" type="checkbox"> runtime</li><li><input disabled="" type="checkbox"> 异步(setTimeout、setInterval、promise、async&#x2F;await的区别)</li><li><input disabled="" type="checkbox"> JS底层逻辑</li><li><input disabled="" type="checkbox"> js和浏览器</li><li><input disabled="" type="checkbox"> 内存泄露</li><li><input disabled="" type="checkbox"> 跨域问题</li><li><input disabled="" type="checkbox"> 查错调试</li><li><input disabled="" type="checkbox"> 原型链</li><li><input disabled="" type="checkbox"> vue2和vue3的优劣(选项式和组合式API)</li><li><input disabled="" type="checkbox"> vue3的响应式实现</li><li><input disabled="" type="checkbox"> reactive和ref</li><li><input disabled="" type="checkbox"> 跨域问题</li></ul>]]></content>
    
    
    <summary type="html">腾讯前端开发岗面试</summary>
    
    
    
    <category term="面试辛酸史" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E8%BE%9B%E9%85%B8%E5%8F%B2/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="腾讯" scheme="http://example.com/tags/%E8%85%BE%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记</title>
    <link href="http://example.com/2024/03/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/03/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-06T16:00:00.000Z</published>
    <updated>2024-03-11T16:31:18.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color="#483D8B">前言</font></h2><p>最近在准备面试，投递岗位主要是前端，但是本人也有点想转后端，所以算法题必刷不可。<br>本笔记用于记录刷题过程中遇到的中等及以上难度的题和一些特殊算法思想，语言大部分会用 JavaScript 来刷题，也有的会用C++和Java<br>数据结构部分回顾直接看我大二上的数据结构复习笔记，感觉网上查到的没有总结的特别好和全面的<br>(如果我还有精力，会考虑把之前专业课的笔记也放上来。以前的笔记都是OneNote里写的，不是Markdown语法，还都是全英的，整理起来有点复杂)<br>目前先看了一下算法基础，可以参考以下文章的介绍，基本上js扫盲没问题，然后开始力扣刷题<br><a class="link"   href="https://juejin.cn/post/7087134135193436197" >https://juejin.cn/post/7087134135193436197<i class="fas fa-external-link-alt"></i></a></p><p>力扣目前是先把LeetCode75刷完，进行算法扫盲  </p><p>唉，没想到上一次刷力扣都是一年前了，这一次争取刷题量大一点，坚持的久一点，会持续更新的  </p><p><font color="#483D8B" face="STCAIYUN" size=5>算法，启动！</font></p><h3 id="题库LeetCode75"><a href="#题库LeetCode75" class="headerlink" title="题库LeetCode75"></a><font color="#483D8B">题库LeetCode75</font></h3><p>本题库涉及到的知识点一览</p><ul><li><input disabled="" type="checkbox"> 数组 &#x2F; 字符串 334</li><li><input disabled="" type="checkbox"> 双指针</li><li><input disabled="" type="checkbox"> 滑动窗口</li><li><input disabled="" type="checkbox"> 前缀和</li><li><input disabled="" type="checkbox"> 哈希表 &#x2F; 哈希集合</li><li><input disabled="" type="checkbox"> 栈 735</li><li><input disabled="" type="checkbox"> 队列</li><li><input disabled="" type="checkbox"> 链表</li><li><input disabled="" type="checkbox"> 二叉树 - 深度优先搜索</li><li><input disabled="" type="checkbox"> 二叉树 - 广度优先搜索</li><li><input disabled="" type="checkbox"> 二叉搜索树</li><li><input disabled="" type="checkbox"> 图 - 深度优先搜索</li><li><input disabled="" type="checkbox"> 图 - 广度优先搜索</li><li><input disabled="" type="checkbox"> 堆 &#x2F; 优先队列 215</li><li><input disabled="" type="checkbox"> 二分查找</li><li><input disabled="" type="checkbox"> 回溯</li><li><input disabled="" type="checkbox"> 动态规划 - 一维 1137</li><li><input disabled="" type="checkbox"> 动态规划 - 多维 72</li><li><input disabled="" type="checkbox"> 位运算</li><li><input disabled="" type="checkbox"> 前缀树</li><li><input disabled="" type="checkbox"> 区间集合</li><li><input checked="" disabled="" type="checkbox"> 单调栈 739 901</li></ul><h4 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334.递增的三元子序列"></a>334.递增的三元子序列</h4><p><strong>题目：</strong></p><p>给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。<br>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p><hr><p><strong>解析：</strong></p><ol><li><p>双向遍历<br> 其实本质上就是找到数组中的一个元素，左边有值比它小，右边有值比它大。那么新创建两个长度为n的MIN和MAX数组，即MIN[i]表示nums[0]到nums[i]中的最小值，MAX[i]表示nums[0]到nums[i]中的最大值，然后遍历nums数组找到MIN[i-1]&lt;nums[i]&lt;MAX[i+1]的返回true  </p><p> 整个逻辑需要遍历数组三遍，额外创建两个数组</p></li><li><p><strong><font color="#483D8B">贪心算法</font></strong><br> 简单说就是寻找局部最优解，再把每次迭代后的最优解叠加</p><p> 本题目怎么联想到贪心呢，因为看完题目后三元组中的第一个肯定是越小越容易满足递增的情况，所以就是要找到最小的做first，第二小的做second，这样遍历只用找到比second大就返回true  </p><p> 那么迭代思路就是先令nums[0]为first，second为正无穷，开始遍历。<em><strong>遇到nums[i]&gt;second的返回true;遇到first&lt;nums[i]&lt;second，second换成更小的nums[i]；遇到first&gt;&#x3D;nums[i]，first换成更小的nums[i]。</strong></em></p><p> <em><strong>注意第三种情况second是没变的，那么新的first位置是在second后面的，只要后续遍历找到一个nums[i]大于second，曾经的first肯定排在second前面，那么就找到了；如果nums[i]小于second大于新的first，second就直接更新了，那么又回到了first位置在second前面的情况。</strong></em></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> increasingTriplet = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> first = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> second = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> num = nums[i]</span><br><span class="line">        <span class="keyword">if</span> (num &gt; second) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; first) &#123;</span><br><span class="line">            second = num</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            first = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215.数组中的第K个最大元素"></a>215.数组中的第K个最大元素</h4><p><strong>题目：</strong></p><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。<br>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br>你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。</p><hr><p><strong>解析：</strong></p><ol><li><p><strong><font color="#483D8B">快排</font></strong><br> 之前看快排的时候只记得二分递归，其实忽略了每一次查找中的中间值的最终位置会被确定下来，可以利用这一点在查找的过程中就 <em><strong>确定某些顺序位置上的值</strong></em> 。简单来说就是某次二分时中间值被放到了了nums[k]的位置(降序)，那么这个中间值就是第k大的元素</p><p> 用Java和js写了一下快排，注意这里我用的是倒序，所以k传参的时候记得要-1</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">quickselect</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> nums[k];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span> (nums[i] &gt; x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span> (nums[j] &lt; x);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= j) <span class="keyword">return</span> quickselect(nums, l, j, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> quickselect(nums, j + <span class="number">1</span>, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] _nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> _nums.length;</span><br><span class="line">        <span class="keyword">return</span> quickselect(_nums, <span class="number">0</span>, n - <span class="number">1</span>, k-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">quickselect</span> = (<span class="params">nums, l, r, k</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> nums[k];</span><br><span class="line">        <span class="keyword">let</span> x = nums[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span> (nums[i] &gt; x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span> (nums[j] &lt; x);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">let</span> tmp = nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= j) <span class="keyword">return</span> <span class="title function_">quickselect</span>(nums, l, j, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="title function_">quickselect</span>(nums, j + <span class="number">1</span>, r, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">quickselect</span>(nums, <span class="number">0</span>, nums.<span class="property">length</span> - <span class="number">1</span>, k - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong><font color="#483D8B">堆排序</font></strong><br> 最大值或者最小值堆和优先队列很适合查找这些有优先级顺序的问题，本题可以建立一个最大堆，做 k−1次删除操作后堆顶元素就是答案。</p><p> 不过理论上时间复杂度是o(nlog(n))&#x3D;o(n)+o(klog(n))，即建堆和删除操作，这个方法纯粹是复习下堆相关的算法，Java方法基本就是JavaScript改一下声明，就不贴代码了</p><p> (突然发现Java和JavaScript语法还蛮像的，只不过JavaScript没有class和函数类型的概念，其他数据结构以及思路是一样的)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> heapSize = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buildMaxHeap</span>(<span class="params">nums, heapSize</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的i是最后一个非叶子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(heapSize / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, i, heapSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从左向右，自上而下的冒泡</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">maxHeapify</span>(<span class="params">nums, i, heapSize</span>) &#123;</span><br><span class="line">        <span class="comment">//左子节点</span></span><br><span class="line">        <span class="keyword">let</span> l = i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="comment">//右子节点</span></span><br><span class="line">        <span class="keyword">let</span> r = i * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> largest = i</span><br><span class="line">        <span class="keyword">if</span> (l &lt; heapSize &amp;&amp; nums[l] &gt; nums[largest]) &#123;</span><br><span class="line">            largest = l</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; heapSize &amp;&amp; nums[r] &gt; nums[largest]) &#123;</span><br><span class="line">            largest = r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (largest !== i) &#123;</span><br><span class="line">            <span class="title function_">swap</span>(nums, i, largest) <span class="comment">// 进行节点调整</span></span><br><span class="line">            <span class="comment">// 继续调整下面的非叶子节点，直到叶子节点</span></span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, largest, heapSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">a, i, j</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buildMaxHeap</span>(nums, heapSize) <span class="comment">// 构建好了一个最大堆</span></span><br><span class="line">    <span class="comment">// 最大堆是最大元素和最后一个元素交换，再删去最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt;= nums.<span class="property">length</span> - k + <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(nums, <span class="number">0</span>, i)</span><br><span class="line">        --heapSize</span><br><span class="line">        <span class="comment">// 重新调整最大堆</span></span><br><span class="line">        <span class="title function_">maxHeapify</span>(nums, <span class="number">0</span>, heapSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72.编辑距离"></a>72.编辑距离</h4><p><strong>题目：</strong></p><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数。<br>你可以对单词字符进行单个插入&#x2F;删除&#x2F;替换操作</p><hr><p><strong>解析：</strong></p><p>这个题目我一看不就是虚拟DOM的diff算法吗，指路<a class="link"   href="https://vue3js.cn/interview/vue/diff.html" >https://vue3js.cn/interview/vue/diff.html<i class="fas fa-external-link-alt"></i></a>，这个题目就是一个简化版<br>先放着，等我学一下动态规划再回头来解这个题</p><h4 id="1137-第N个泰波那契数"><a href="#1137-第N个泰波那契数" class="headerlink" title="1137.第N个泰波那契数"></a>1137.第N个泰波那契数</h4><p><strong>题目：</strong></p><p>泰波那契序列 Tn 定义如下：<br>T0 &#x3D; 0, T1 &#x3D; 1, T2 &#x3D; 1, 且在 n &gt;&#x3D; 0 的条件下 Tn+3 &#x3D; Tn + Tn+1 + Tn+2<br>给你整数 n，请返回第 n 个泰波那契数 Tn 的值。</p><hr><p><strong>解析：</strong></p><p>题目不难，可以递归，但是一旦数据过多会超时；也可以用动态规划，把状态方程换成递推关系式  </p><p>官方题解用到的矩阵快速幂方法很有意思，记录一下，这样做时间复杂度O(logn)<br>本题是同样的思路，这里直接贴官方题解了<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image.5c0q6ydd64.webp"                        alt="picture"                 ><br>快速幂指路<br><a class="link"   href="https://www.cnblogs.com/bigsai/p/15169985.html" >https://www.cnblogs.com/bigsai/p/15169985.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tribonacci = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> q = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">pow</span>(q, n);</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pow</span> = (<span class="params">a, n</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//单位矩阵</span></span><br><span class="line">    <span class="keyword">let</span> ret = [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//判断奇偶用</span></span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) === <span class="number">1</span>) &#123;</span><br><span class="line">            ret = <span class="title function_">multiply</span>(ret, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二进制移位本质上就是除以2或乘以2</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = <span class="title function_">multiply</span>(a, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j] + a[i][<span class="number">2</span>] * b[<span class="number">2</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1071-字符串的最大公因子"><a href="#1071-字符串的最大公因子" class="headerlink" title="1071.字符串的最大公因子"></a>1071.字符串的最大公因子</h4><p><strong>题目：</strong></p><p>对于字符串 s 和 t，只有在 s &#x3D; t + t + t + … + t + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。<br>给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2</p><hr><p><strong>解析：</strong></p><p>这题虽然是简单题，但是背后的思想还蛮重要的</p><p><strong><font color="#483D8B">辗转相除法</font></strong>     <strong>GCD（被除数，除数）&#x3D; GCD（除数，余数）</strong></p><p>理解辗转相除的关键在于被除数和除数有相同的因数，那么被除数和除数的余数跟它们也有一样的因数，反之亦然</p><p>辗转相除指路，我觉得这篇文章讲的很清楚<br><a class="link"   href="https://zhuanlan.zhihu.com/p/324578532" >https://zhuanlan.zhihu.com/p/324578532<i class="fas fa-external-link-alt"></i></a>  </p><p>把文章中证明过程贴一下<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image.8kzu3qy3vj.webp"                                        ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image.7w6kjqdi0p.webp"                                        ></p><p>本题目的逻辑在于如果它们有公因子abc，那么str1就是m个 abc 的重复，str2是n个abc的重复，连起来就是m+n个abc，那么理论上先后顺序不重要，m+n个abc跟n+m个abc是一样的。即如果 str1 + str2 &#x3D;&#x3D;&#x3D; str2 + str1 就意味着有解，str1 + str2 !&#x3D;&#x3D; str2 + str1 也是无解的充要条件。当确定有解的情况下，最优解是长度为 gcd(str1.length, str2.length) 的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">str1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">str2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> gcdOfStrings = <span class="keyword">function</span>(<span class="params">str1, str2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (str1 + str2 !== str2 + str1) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">//余数为0的时候除数就是最大约数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">gcd</span> = (<span class="params">a, b</span>) =&gt; (<span class="number">0</span> === b ? a : <span class="title function_">gcd</span>(b, a % b))</span><br><span class="line">  <span class="keyword">return</span> str1.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="title function_">gcd</span>(str1.<span class="property">length</span>, str2.<span class="property">length</span>))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a>739.每日温度</h4><p><strong>题目：</strong></p><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><hr><p><strong>解析：</strong></p><p><strong><font color="#483D8B">单调栈</font></strong> 即栈中放的数据单调有序</p><p><em><strong>所有找下一个最大&#x2F;小值距离当前值的距离都可以用单调栈。</strong></em> 本方法用空间换时间，空间复杂度o(n)额外维护一个数组，时间复杂度o(n)只用正向遍历一遍</p><p>单调递减栈步骤如下：维护一个数组下标的单调栈，正向遍历数组，当栈为空的时候直接当前下标入栈；不为空的时候比较栈顶元素对应的数组数值temperatures[stack[stack.length-1]]和当前遍历数组数值temperatures[i]，temperatures[i]&gt;temperatures[stack[stack.length-1]]的话，栈顶元素pop出来，该元素对应的距离为i-stack[stack.length-1]，然后循环直至栈为空或者不满足大于的条件，最后i进栈</p><p>pop的时候更新距离是因为遍历数组是按正序遍历的，那么满足大小条件的一定是右边第一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">temperatures</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="keyword">function</span>(<span class="params">temperatures</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len=temperatures.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> ans=<span class="keyword">new</span> <span class="title class_">Array</span>(len).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>&amp;&amp;temperatures[i]&gt;temperatures[stack[stack.<span class="property">length</span>-<span class="number">1</span>]])&#123;</span><br><span class="line">            <span class="keyword">const</span> index=stack.<span class="title function_">pop</span>()</span><br><span class="line">            ans[index]=i-index</span><br><span class="line">        &#125;</span><br><span class="line">        stack.<span class="title function_">push</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="901-股票价格跨度"><a href="#901-股票价格跨度" class="headerlink" title="901.股票价格跨度"></a>901.股票价格跨度</h4><p><strong>题目：</strong></p><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的跨度 。<br>当日股票价格的 跨度 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。<br>例如，如果未来 7 天股票的价格是 [100,80,60,70,60,75,85]，那么股票跨度将是 [1,1,1,2,1,4,6] 。<br>实现 StockSpanner 类：<br>StockSpanner() 初始化类对象。<br>int next(int price) 给出今天的股价 price ，返回该股票当日价格的 跨度 。</p><hr><p><strong>解析：</strong></p><p><strong><font color="#483D8B">单调栈</font></strong> 即栈中放的数据单调有序</p><p>本题是倒着过去的，找出一个元素左边第一个大于该元素 ，本质上也是用当前元素的价格和栈顶元素价格比较，小的就弹出来，直到一个更大的，返回两个元素下标差，把当前元素入栈</p><p>需要注意的是因为本题是通过调用一个next函数返回值，所以把下标和价格储存成一个二元数对更方便。为了防止栈空，把第一个栈元素设置为下标-1和价格无穷大</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">price</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">StockSpanner</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>([-<span class="number">1</span>, <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>]);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">idx</span> = -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">StockSpanner</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">next</span> = <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">idx</span>++;</span><br><span class="line">    <span class="keyword">while</span> (price &gt;= <span class="variable language_">this</span>.<span class="property">stack</span>[<span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="property">idx</span> - <span class="variable language_">this</span>.<span class="property">stack</span>[<span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>([<span class="variable language_">this</span>.<span class="property">idx</span>, price]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="735-小行星碰撞"><a href="#735-小行星碰撞" class="headerlink" title="735.小行星碰撞"></a>735.小行星碰撞</h4><p><strong>题目：</strong></p><p>给定一个整数数组 asteroids，表示在同一行的小行星。<br>对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。<br>找出碰撞后剩下的所有小行星。碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。</p><hr><p><strong>解析：</strong></p><p>题目规则简化是数组相邻元素左正右负就只留下绝对值更大的，不断碰撞直到只剩下左正右负的相邻元素  </p><p>代码逻辑是用栈来模拟行星碰撞，逐一遍历数组，将元素依次压入栈中，当出现左正右负时，先比较其和栈顶元素绝对值大小，同时修改alive状态，直到左正右负消失，alive的值决定是否push元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">asteroids</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> asteroidCollision = <span class="keyword">function</span> (<span class="params">asteroids</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aster <span class="keyword">of</span> asteroids) &#123;</span><br><span class="line">        <span class="comment">//代表每次遍历要压入栈的那个行星是否爆炸</span></span><br><span class="line">        <span class="keyword">let</span> alive = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (alive &amp;&amp; stack.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; stack[stack.<span class="property">length</span> - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; aster &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//入栈元素大于栈顶元素绝对值才设置alive为true</span></span><br><span class="line">            alive = stack[stack.<span class="property">length</span> - <span class="number">1</span>] &lt; -aster;</span><br><span class="line">            <span class="keyword">if</span> (stack[stack.<span class="property">length</span> - <span class="number">1</span>] &lt;= -aster) &#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (alive) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(aster);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> size = stack.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> ans = <span class="keyword">new</span> <span class="title class_">Array</span>(size).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        ans[i] = stack.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录一下算法学习和刷题过程</summary>
    
    
    
    <category term="技术学习" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一战腾讯</title>
    <link href="http://example.com/2024/03/06/%E4%B8%80%E6%88%98%E8%85%BE%E8%AE%AF/"/>
    <id>http://example.com/2024/03/06/%E4%B8%80%E6%88%98%E8%85%BE%E8%AE%AF/</id>
    <published>2024-03-05T16:00:00.000Z</published>
    <updated>2024-03-08T07:14:44.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无笔试，面试初试-已挂"><a href="#无笔试，面试初试-已挂" class="headerlink" title="无笔试，面试初试(已挂)"></a><em>无笔试，面试初试(已挂)</em></h2><p><strong>部门</strong>：qq的PC端的某前端开发岗(PCG)<br><strong>形式</strong>：电话<br><strong>时长</strong>：15min<br><strong>时间</strong>：2024&#x2F;3&#x2F;6 11:00</p><h3 id="内容回忆"><a href="#内容回忆" class="headerlink" title="内容回忆"></a><em>内容回忆</em></h3><ol><li><p><strong>投的前端岗位，为什么简历上无前端项目经历？</strong></p><p> <em>当时写简历的时候觉得自己搞得全栈项目只做了部分功能，不太好意思写，总不能把跟着视频网站敲的项目放上去吧……但其实蓝鲸项目是有前端部分的，但貌似被面试官忽略了(尴尬)</em></p></li><li><p><strong>介绍自己开发过最难的一个前端项目，里面实现了哪些功能技术点，用的什么技术栈？</strong></p><p> <em>因为确实没有做过很复杂的前端项目，自己搭建后端服务器和数据库做的全栈项目只完成了一部分，而且重点放在页面实现和美化上了，前后端交互的部分太简单了，也没有尝试过部署项目(还是太摆烂了)。我自己开发中遇到的比较多的都是页面渲染和JS交互逻辑的问题，而且都是服务器是本地搭建的，数据也很多是静态数据，所以在前后端交互上答得不太好(悲)</em></p></li><li><p><strong>登录与注册页面的原生逻辑是怎样实现的(不用插件)，如何保持浏览器登录状态？</strong></p><p> <em>这里回答的有点不对题，我回答的是登录进去后在应用中如何保持登录状态(jwt返回的token值保存在localStorage里)，被打断了，应该是用户点进登录页面后浏览就要自动识别呈现是登录页还是注册页，面完后才想起来可能是回答cookie相关</em>  </p><p> <em>才发现应该想问的是如何实现单点登录(悲，是JavaScript里面的，只顾着看Vue.js了)，参考这个网址<br> <a class="link"   href="https://vue3js.cn/interview/JavaScript/single_sign.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88" >https://vue3js.cn/interview/JavaScript/single_sign.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88<i class="fas fa-external-link-alt"></i></a></em></p></li><li><p><strong>是否了解过axios的使用过程，封装的源码逻辑？(vuex)</strong></p><p> <em>我其实没看过封装的源码(流汗)，只能按照自己的理解说，能感觉到应该没说到点子上</em></p></li><li><p><strong>我的项目中用了很多封装好的模块，被提问不用封装模块该怎么用JS原生代码实现？</strong></p><p> <em>前面介绍自己的项目时说了一堆花里胡哨的功能，引入了一堆组件插件，回旋镖打在自己身上了(汗流浃背了)</em></p></li><li><p><strong>怎么处理跨域问题？(还有一些前后端交互的部分)</strong></p><p> <em>我说了两个，但感觉面试官觉得这两个方法都不是他想听的?</em></p></li></ol><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a><em>反思</em></h3><p>整场面试都在围绕项目开发中的问题，<em><strong>算法&#x2F;数据结构、JS&#x2F;HTML&#x2F;CSS&#x2F;Vue语法、计算机网络、操作系统、后端&#x2F;数据库语法</strong></em> 全部都 <strong>没问</strong>，然后我复习的基本是这些内容。本以为具体项目开发二面三面才会，没想到一来就是项目开发里的问题，感觉就是婉拒了(bushi)。然后就是一直问有没有看过源码和封装逻辑，这个确实忽略了，都是直接用了，回答的时候很尴尬  </p><p>总之，这次面试确实是太赶了，临时决定要投一下试试，很多东西都没准备好，果然挂了。现在的我对于前端知识很多处在一个知其然不知其所以然的状态，接下来还是要 <em><strong>搞一个复杂的项目实战，并且不能依赖插件，要看源码，尝试自己动手封装</strong></em> ，当然 <em><strong>计算机基础知识和算法题</strong></em> 也要好好刷(也有点庆幸这次没问算法，不然挂的更快)，后续实习投递都有笔试或者现场手撕代码的</p><h2 id="没关系，第一次面试而已，来日方长"><a href="#没关系，第一次面试而已，来日方长" class="headerlink" title="没关系，第一次面试而已，来日方长~"></a>没关系，第一次面试而已，来日方长~</h2>]]></content>
    
    
    <summary type="html">腾讯前端开发岗面试</summary>
    
    
    
    <category term="面试辛酸史" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E8%BE%9B%E9%85%B8%E5%8F%B2/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="腾讯" scheme="http://example.com/tags/%E8%85%BE%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记</title>
    <link href="http://example.com/2024/03/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/03/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-03T16:00:00.000Z</published>
    <updated>2024-03-08T08:18:55.639Z</updated>
    
    <content type="html"><![CDATA[<p>主要是介绍了ES5的语法，后面补充了ES6的不同之处</p><span id="more"></span><h2 id="JavaScript三部分"><a href="#JavaScript三部分" class="headerlink" title="JavaScript三部分"></a>JavaScript三部分</h2><p><strong>核心(ECMAScript)</strong><br>语言的基本组成部分<br><strong>文档对象模型(DOM)</strong><br>把页面映射成多层节点结构 XML 扩展HTML<br>提供访问和操作网页内容的方法和接口<br><strong>浏览器对象模型(BOM)</strong><br>与浏览器交互的方法和接口  </p><h2 id="script"><a href="#script" class="headerlink" title="&lt; script&gt;"></a>&lt; script&gt;</h2><p>async:下载脚本，外部脚本文件有效，不保证执行顺序<br>charset:src属性指定的字符集<br>defer:延迟到文档完全被解析后执行，外部脚本文件有效<br>src:包含执行代码的外部文件<br>type:脚本语言内容类型，默认值text&#x2F;javascript  </p><p>放在HTML文件底部<br>直接嵌入或包含外部文件<br>直接嵌入要指定type属性<br>&lt;script&gt; &lt;&#x2F;script&gt; 一对出现，函数内部出现记得用转义符号&lt;/script&gt;<br>包含外部文件要指定src属性，&lt;script&gt; &lt;&#x2F;script&gt;中不包含额外代码<br>&lt;script type&#x3D;”text&#x2F;javascript” src&#x3D;”a.js”&gt; &lt;&#x2F;script&gt;<br>放在&lt;body&gt;元素中页面内容的后面  </p><h2 id="基本概念-只记录了一些跟我印象中不同的点"><a href="#基本概念-只记录了一些跟我印象中不同的点" class="headerlink" title="基本概念(只记录了一些跟我印象中不同的点)"></a>基本概念(只记录了一些跟我印象中不同的点)</h2><p>区分大小写<br>var创建变量是局部变量，省略后是全局变量<br>使用var和function声明的变量不可删除，因为被标记成不可配置了<br>delete不能删除全局变量，但是可以删除window对象上定义的属性<br>delete操作符跟直接释放内存无关，是断开引用间接完成的，对象的属性和数组成员才可以删除<br>这样的删除仍然占据内存空间，要设置null才能释放</p><ol><li>数据类型</li></ol><ul><li>Undefined<br>声明未初始化<br>typeof()</li><li>Null</li><li>Boolean<br>true false 字面值 全小写<br>其他类型的空值、0、NaN、null、undefined转换后都是false</li><li>Number<br>NaN Number() parseInt() parseFloat()</li><li>String<br>转义字符<br>不可变<br>toString()</li><li>object<br>new 跟Java蛮像的P35一些函数</li></ul><p>typeof 返回数据类型 object null注意返回</p><ol start="2"><li>操作符（意外跟C很像）<br>一元操作符自增自减前置后置<br>位操作符<br>~非&amp;与|或^异或&gt;&gt;右移&lt;&lt;左移 &gt;&gt;&gt;无符号右移<br>&#x3D;&#x3D;会强制转换 &#x3D;&#x3D;&#x3D;不会强制转换<br>?:</li><li>语句<br>if do-while while for for-in<br>label标识特定位置 break continue with设置作用域<br>switch</li><li>函数<br>function 参数不限制个数和类型 通过argument对象访问元素<br>参数传递都是值传递<br>没有重载，后面覆盖</li><li>引用<br>instanceof</li><li>作用域<br>没有块级作用域，if for语句中初始化变量在语句执行完之后依旧存在于语句外部执行环境<br>var是添加到最近的环境，没有就是添加到全局环境</li><li>垃圾收集<br>标记清除</li></ol><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li><p>object类型<br>用new创建；对象字面量<br>很像字典，都是花括号里属性名：属性值</p></li><li><p>Array类型<br>每一项可以保存任何类型的数据，动态调整数组大小<br>Array(数字)表示数组项目数量<br>Array(其他类型参数)创建包含那个值的只有一项的数组<br>方括号[]索引<br>isArray()<br>toString() 每个值的字符串形式，以逗号分隔<br>valueOf()<br>join()分隔符字符串<br>push() pop() stack<br>shift()移除第一个 unshift()前端添加 list queue<br>reverse()翻转<br>sort()比较字符串 小心15&lt;5，从字符串上看，定义compare函数作为参数传入sort()<br>concat() 拼接字符串和多个数组的每一项<br>slice() 返回[开始索引，结束索引)中间的项，负数则用数组长度加上该数来确定位置<br>splice()</p><ul><li>删除 第一项位置，删除项数</li><li>插入 起始位置，删除项数，插入的项</li><li>替换 起始位置，删除项数，插入的项</li></ul><p>indexOf() lastIndexOf()查找位置，没找到返回-1</p></li></ul><p>迭代方法<br>every() some() filter() forEach() map()<br>reduce() reduceRight()</p><ul><li><p>Date类型</p></li><li><p>RegExp类型 每一次要创建新的实例<br>g全局i不分大小写m多行<br>exec()</p></li><li><p>function类型<br>function 函数名(参数){语句;}<br>var 函数名&#x3D;function(参数){语句;};<br>一个函数可以有多个名字<br>没有重载<br>arguments callee用于解除代码和函数名的耦合<br>this 先局部再全局<br>call() apply()<br>基本包装类型<br>Boolean Number String<br>不能添加属性和方法<br>charAt() charCodeAt() slice() substr() substring() indexOf() trim() toLowerCase() toUpperCase() match() search() replace() split() localeCompare() fromCharCode()</p></li></ul><p>全局对象<br>URI编码方法<br>eval() 解析器 接受要执行的JS字符串<br>window对象<br>Math对象</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>对象有属性和方法<br>使用Object.defineProperty()来修改属性特性</p><ul><li>数据属性<ul><li>Configurable<br>能否修改或删除属性特性</li><li>Enumerable<br>能否for-in循环</li><li>Writable<br>能否修改属性值</li><li>Value<br>读写值</li></ul></li><li>访问器属性<ul><li>Configurable<br>能否修改或删除属性特性</li><li>Enumerable<br>能否for-in循环</li><li>Get<br>读取</li><li>Set<br>写入<br>使用Object.defineProperties()定义多个属性</li></ul></li></ul><p><strong>工厂模式</strong> 在函数里面新创建一个对象<br><strong>构造函数模式</strong> 把函数当做构造函数，在外部直接new对象<br><strong>原型模式</strong> 一个函数有prototype属性，其他实例共享prototype里面的属性和函数，先找对象实例本身属性，再找原型对象的属性，实例和原型之间的连接是指针<br>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，实例都包含一个指向原型对象的内部指针<br>hasOwnProperty()<br>in<br>constructor()<br>可以随时为原型添加属性和方法，但不要重写<br><strong>构造函数和原型模式的组合</strong><br><strong>动态原型模式</strong> 在构造函数里初始化原型函数<br><strong>寄生构造函数</strong> 要用new的工厂模式<br><strong>稳妥构造函数</strong> 不能用this</p><p>实现继承 原型链<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-1.7egir58ygq.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-2.9kfxcx0m7u.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-3.7p1dtag6z.webp"                        alt="Alt text"                 ><br>搜索属性会沿着原型链往上<br>通过原型链实现继承的时候，不能使用对象字面量创建原型方法，因为会重写原型链<br>在每一个创建的子类对象上使用超类对象的call或者apply方法进行所有对象初始化<br>寄生组合式继承是最完美的继承方式<br>不必为指定子类型的原型而调用超类型的构造函数</p><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><ul><li>函数声明:function 函数名(){}<br>函数声明可以置于调用语句之后</li><li>函数表达式:var 变量名&#x3D;function(){};<br>此为匿名函数<br>要先赋值才可以调用<br>编写递归函数，函数内部用argument.callee代替函数名<br>函数第一次调用创建一个执行环境和作用域链，并把作用域连赋值给一个特殊的内部属性scope，然后初始化活动对象，外部，外部的外部，知道作用域链终点全局执行环境<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-4.2ruvqgaet8.webp"                        alt="Alt text"                 ></li></ul><p>闭包，在另一个函数内部定义的函数会将外部函数的活动对象添加到它的作用域<br>闭包结构：</p><ul><li>一个函数，里面有一些变量和另一个函数</li><li>外部函数里面的函数使用了外部函数的变量</li><li>外部函数最后把它里面的那个函数用return抛出去</li></ul><p>闭包作用：</p><ul><li>在函数外部可以读取函数内部的变量</li><li>让这些变量的值始终保持在内存中</li></ul><p>闭包只能取得包含函数中任何变量的最后一个值<br>解决方法是再嵌套一层函数，形成一个闭包<br>注意this的指向问题，可能闭包函数是在window作用域下执行的，this就不是指向外部函数而是window<br>内存泄漏问题，闭包引用外层对象，写一个变量保存对象副本，结束闭包后把对象置为null<br>多次声明同一变量，会对后续声明视而不见<br>在匿名函数中定义的任何变量都会在执行结束时被销毁<br>(function(){作用域})</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ol><li><p><strong>window对象</strong><br>全局作用域中声明的变量和函数收拾window对象的属性和方法<br>尝试访问未声明的变量会抛出错误，但是可以查询window对象判断未声明的对象是否存在<br><strong>窗口关系和框架</strong><br>top对象指向最外层框架即浏览器窗口<br>parent对象指向当前框架的直接上层框架<br>没有框架的情况下parent&#x3D;top&#x3D;window<br><strong>窗口位置和大小</strong><br>moveTo(x,y)移动到实际位置<br>moveBy(x,y)移动量<br>resizeTo(x,y)设置大小<br>resizeBy(x,y)新的和原来的差<br><strong>导航和打开窗口</strong><br>window.open()<br>参数：URL，窗口目标，特性字符串，新页面是否取代浏览器中当前加载页的布尔值<br>window.setTimeout()执行代码和等待时间<br>clearTimeout()取消超时调用<br>setInterval()间隔时间重复执行<br>clearInterval()</p></li><li><p><strong>location对象</strong><br>既是window的属性也是document的属性<br>location.search访问URL里面的内容<br>location.assign()传递URL<br>location.reload()无参重载&#x2F;有参服务器重载</p></li><li><p><strong>navigator</strong><br>plugins<br>registerContentHandler()</p></li><li><p><strong>screen对象</strong></p></li><li><p><strong>history对象</strong></p></li></ol><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>把HTML或者XML文档描绘成多层节点结构</p><ol><li><strong>Node类型</strong><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-5.73toxztqbg.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-6.6pn974lfgd.webp"                        alt="Alt text"                 ><br>nodeType, nodeName, nodeValue, childNodes, NodeList, ownerDocument<br>appendChild(), insertBefore(),replaceChild(), cloneNode()(注意区别这里深复制是复制节点和子节点树，浅复制是只复制节点本身), normalize()</li><li><strong>Document类型</strong><br>window对象的一个属性，可以当做全局对象来访问<br>documentElement指向&lt;html&gt;<br>body指向&lt;body&gt;<br>title, URL, domain, referrer<br>getElementById()<br>getElementByTagName()返回的是同一个tag集合<br>HTMLCollection.namedItem()<br>HTMLCollection.getElementByNamed()<br>特殊集合P258<br>write(), writeln(), open(), close()</li><li><strong>Element</strong><br>attributes属性 get set remove</li></ol><p>querySelector()接受CSS选择符</p><p>HTML5<br>getElementByClassName()<br>classList属性 add() contains() remove() toggle()<br>document.activeElement focus()<br>HTMLDocument属性<br>readyState<br>compatMode<br>head<br>charset<br>data-自定义数据属性<br>innerHTML<br>outerHTML<br>scrollIntoView()<br>简单描述一下就是一棵DOM树有节点和元素，还有自己对应的属性，可以创建节点然后添加到树里面，还可以直接设置元素的style属性<br>可以直接查询包含某些类或者ID的元素<br>遍历<br>NodeIterator<br>TreeWalker</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><ol><li>变量声明<br>let const var<br>可以创建块作用域</li><li>剩余…<br>…参数 动态参数<br>…variable<br>…数组 拆解数组</li><li>apply(this,array) call(this,arg)</li><li>解构赋值<br>左侧定义了要取出的值<br>剩余属性位于末尾结束解构模式</li><li>箭头函数<br>去掉function，直接(参数)&#x3D;&gt;{}<br>不能用作方法<br>function定义的函数this随上下文变化而变化<br>箭头函数this始终指向定义函数的环境</li><li>promise<br>Promise 构造函数是 JavaScript 中用于创建 Promise 对象的内置构造函数，接受一个函数作为参数，该函数是同步的并且会被立即执行，所以我们称之为起始函数。起始函数包含两个参数 resolve 和 reject，起始函数执行成功时，它应该调用 resolve 函数并传递成功的结果。当起始函数执行失败时，它应该调用 reject 函数并传递失败的原因。<br>then：用于处理 Promise 成功状态的回调函数。<br>catch：用于处理 Promise 失败状态的回调函数。<br>finally：无论 Promise 是成功还是失败，都会执行的回调函数。</li><li>for in和 for of<br>数组遍历用for of，对象遍历用for in<br>for…in 语句以任意顺序迭代对象的可枚举属性。<br>for…of 语句遍历可迭代对象定义要迭代的数据。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是介绍了ES5的语法，后面补充了ES6的不同之处&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="ES6" scheme="http://example.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记</title>
    <link href="http://example.com/2024/03/04/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/03/04/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-03T16:00:00.000Z</published>
    <updated>2024-03-08T08:22:24.671Z</updated>
    
    <content type="html"><![CDATA[<p>这份笔记主要记录的是vue2和补充vue3的语法</p><span id="more"></span><p>看了一下这个vue2全家桶列举挺完整全面的<br><a class="link"   href="https://blog.csdn.net/qq_44663761/article/details/122328822?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~Rate-16-122328822-blog-135767247.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~Rate-16-122328822-blog-135767247.235%5Ev43%5Econtrol&amp;utm_relevant_index=17" >https://blog.csdn.net/qq_44663761/article/details/122328822?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-16-122328822-blog-135767247.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-16-122328822-blog-135767247.235%5Ev43%5Econtrol&amp;utm_relevant_index=17<i class="fas fa-external-link-alt"></i></a></p><p>vue3的补充更新语法<br><a class="link"   href="https://24kcs.github.io/vue3_study/chapter4/01_Composition%20API_%E5%B8%B8%E7%94%A8%E9%83%A8%E5%88%86.html" >https://24kcs.github.io/vue3_study/chapter4/01_Composition%20API_%E5%B8%B8%E7%94%A8%E9%83%A8%E5%88%86.html<i class="fas fa-external-link-alt"></i></a></p><p>vue3的关键在于理解Composition (组合) API和setup的使用</p><h2 id="vue基本语法"><a href="#vue基本语法" class="headerlink" title="vue基本语法"></a>vue基本语法</h2><p>v-for绑定迭代<br>v-on绑定事件，简写形式”@”<br>v-model绑定数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">list</span>:[<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>],</span><br><span class="line">            <span class="attr">inputValue</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">handleBtnClick</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">inputValue</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>v-bind绑定对象，简写形式”:”<br>component全局组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;todo-item v-<span class="attr">bind</span>:content=<span class="string">&quot;item&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;item in list&quot;</span>&gt;&lt;/todo-item&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;TodoItem&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&quot;content&quot;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;</span>,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>局部组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">TodoItem</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&quot;content&quot;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="title class_">TodoItem</span>: <span class="title class_">TodoItem</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">list</span>: [<span class="string">&quot;first&quot;</span>, <span class="string">&quot;second&quot;</span>],</span><br><span class="line">      <span class="attr">inputValue</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handleBtnClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">inputValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>父子组件传值<br>父组件v-bind的格式向子组件传递，然后props里接收<br>子组件$emit向上一层触发事件，父组件监听获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;todo-item</span><br><span class="line">          v-<span class="attr">bind</span>:content=<span class="string">&quot;item&quot;</span></span><br><span class="line">          v-<span class="attr">bind</span>:index=<span class="string">&quot;index&quot;</span></span><br><span class="line">          v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span></span><br><span class="line">          @<span class="keyword">delete</span>=<span class="string">&quot;handleItemDelete&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/todo-item&gt;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TodoItem</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;li @click=&#x27;handleItemClick&#x27;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handleItemClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;delete&quot;</span>, <span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="title class_">TodoItem</span>: <span class="title class_">TodoItem</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">      <span class="attr">inputValue</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handleBtnClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">inputValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">handleItemDelete</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);      </span><br></pre></td></tr></table></figure><p>生命周期函数是指vue实例在某一个时间点会自动执行的函数<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-7.5mnjw8plku.webp"                        alt="Alt text"                 ><br>图里是vue2的，vue3在命名上多了on和setup<br>2.x 版本生命周期相对应的组合式 API<br>beforeCreate -&gt; 使用 setup()<br>created -&gt; 使用 setup()<br>beforeMount -&gt; onBeforeMount<br>mounted -&gt; onMounted<br>beforeUpdate -&gt; onBeforeUpdate<br>updated -&gt; onUpdated<br>beforeDestroy -&gt; onBeforeUnmount<br>destroyed -&gt; onUnmounted<br>errorCaptured -&gt; onErrorCaptured  </p><p>template<br>插值表达式用两个大括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-text=<span class="string">&quot;name+&#x27; abc&#x27;&quot;</span>&gt;&lt;/div&gt; 输出字符串</span><br><span class="line">&lt;div v-html=<span class="string">&quot;name+&#x27; abc&#x27;&quot;</span>&gt;&lt;/div&gt; 输出解析成html格式的字符串</span><br><span class="line">&lt;div&gt;&#123;&#123;name+<span class="string">&#x27; abc&#x27;</span>&#125;&#125;&lt;/div&gt; 输出字符串</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;&lt;h1&gt;ella&lt;/h1&gt;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>computed属性会有缓存，methods没有缓存性能较差<br>watch监听变化也有缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &#123;&#123;age&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">firstName</span>:<span class="string">&quot;Ella&quot;</span>,</span><br><span class="line">      <span class="attr">lastName</span>:<span class="string">&quot;L&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="attr">fullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&quot; &quot;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="attr">firstName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullName</span>=<span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&quot; &quot;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullName</span>=<span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&quot; &quot;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>set和get设置方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="attr">fullName</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr=value.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span>=arr[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span>=arr[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>样式绑定.通过v-band绑定class或者style来实现<br>可以绑定对象也可以是数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .<span class="property">activated</span>&#123;</span><br><span class="line">        <span class="attr">color</span>: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleDivClick&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span>=<span class="string">&quot;&#123;activated:isActivated&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">或者</span>&quot;[<span class="attr">activated</span>]&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>Ella</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">handleDivClick</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isActivated</span>=!<span class="variable language_">this</span>.<span class="property">isActivated</span>;</span><br><span class="line">    或者<span class="variable language_">this</span>.<span class="property">activated</span>=<span class="variable language_">this</span>.<span class="property">activated</span>===<span class="string">&quot;activated&quot;</span>?<span class="string">&quot;&quot;</span>:<span class="string">&quot;activated&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">再或者&lt;div :style=<span class="string">&quot;styleObj&quot;</span>&gt;hello world&lt;/div&gt;</span><br><span class="line">绑定style直接设置</span><br></pre></td></tr></table></figure><p>条件渲染<br>v-if 对应的值为false直接在dom上不存在<br>v-show 对应的值为false，dom上存在，不显示<br>v-if可以写循环，必须连在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&quot;show===&#x27;a&#x27;&quot;</span>&gt;A&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;show ===&#x27;b&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>key值唯一可以保证不被复用<br>在控制台直接用下标[]修改数组内容是不会改变页面显示<br>要使用相应的修改函数才可以<br>push pop shift unshift splice sort reverse<br>或者直接改变数组引用对象也可以<br>对象也可以循环，用set方法修改内容<br>Vue.set(app.list,”number”,18)<br>app.$set(app.list,”number”,18)<br>Vue.set(target, key, val)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) of list&quot;</span></span><br><span class="line">           :key=<span class="string">&quot;item.id&quot;</span>&gt;</span><br><span class="line">           &#123;&#123;item.<span class="property">text</span>&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">      &lt;/div&gt; 数组</span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(item, key) of list&quot;</span>&gt;</span><br><span class="line">           &#123;&#123;item&#125;&#125;--&#123;&#123;key&#125;&#125;</span><br><span class="line">      &lt;/div&gt; 对象</span><br></pre></td></tr></table></figure><p>&lt;table&gt;里面有&lt;tbody&gt;里面有&lt;tr&gt;里面有&lt;td&gt;<br>&lt;tbody&gt;里面不能直接用template，但是可以用is语句来指向template子组件<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-8.5q75tyioam.webp"                        alt="Alt text"                 ><br>ul,ol,select标签同理<br>子组件里data必须是函数，不能是父组件中的对象，因为子组件都拥有独立数据不共享<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-9.8ojfxgqxs0.webp"                        alt="Alt text"                 ></p><p>用ref来操作dom</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  ref=<span class="string">&quot;hello&quot;</span> </span><br><span class="line">            @click=<span class="string">&quot;handleClick&quot;</span> &gt;hello world&lt;/div&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handleClick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">hello</span>)；</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">hello</span>.<span class="property">innerHTML</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-10.51dw9xv5a8.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-12.6pn974lfgi.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-11.5j3xyiwiv5.webp"                        alt="Alt text"                 ></p><p>父子组件传递<br>父组件向子组件传数据，要在父组件components里先注册，然后标签里传参，子组件用props接收属性数据，且最好不要修改，克隆一个副本修改<br>子组件向父组件传值调用$emit(方法名)，父组件在标签里用@监听方法然后触发事件<br>子组件的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">counter</span> <span class="attr">:count</span>=<span class="string">&quot;0&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handelIncrease&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span>注意在这里定义的事件是和父组件绑定的，要子组件$emit</span><br><span class="line">      &lt;counter :count=<span class="string">&quot;1&quot;</span> @change=<span class="string">&quot;handelIncrease&quot;</span>&gt;&lt;/counter&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&quot;count&quot;</span>],</span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: <span class="variable language_">this</span>.<span class="property">count</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;div @click=&#x27;handleClick&#x27;&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;&quot;</span>,这里定义的事件才是子组件自定义事件，和子组件里面的method绑定</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handleClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span>++;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;change&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">total</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="attr">counter</span>: counter,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">handelIncrease</span>: <span class="keyword">function</span> (<span class="params">step</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">total</span> += step;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>传参校验<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-13.5mnjw8plkz.webp"                        alt="Alt text"                 ><br>非props特性会显示在dom标签里，父组件传子组件不接收<br>绑定原生事件只需要在事件后加上.native<br>非父子组件传值bus 发布订阅模式 观察者模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">content</span>=<span class="string">&quot;ella&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">content</span>=<span class="string">&quot;syray&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">selfContent</span>:<span class="variable language_">this</span>.<span class="property">content</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;div @click=&#x27;handleClick&#x27;&gt;&#123;&#123;selfContent&#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">handleClick</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">bus</span>.$emit(<span class="string">&#x27;change&#x27;</span>,<span class="variable language_">this</span>.<span class="property">selfContent</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> this_=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bus</span>.$on(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">            this_.<span class="property">selfContent</span>=msg;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>插槽</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;head&quot;</span>&gt;</span>ella1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>ella2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;slot name=&#x27;head&#x27;&gt;default&lt;/slot&gt;</span></span><br><span class="line"><span class="string">                    &lt;slot name=&#x27;foot&#x27;&gt;default&lt;/slot&gt;</span></span><br><span class="line"><span class="string">               &lt;/div&gt;`</span>,</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-14.1e8cmezcsj.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-15.2yy3lvwk90.webp"                        alt="Alt text"                 ></p><p>动态组件<br>v-once是创建一次就放入内存中，提高性能，不会反复创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;child-one&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div v-once&gt;one&lt;/div&gt;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;child-two&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div v-once&gt;two&lt;/div&gt;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;child-one&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">handleBtnClick</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">type</span>=<span class="variable language_">this</span>.<span class="property">type</span>===<span class="string">&#x27;child-one&#x27;</span>?<span class="string">&#x27;child-two&#x27;</span>:<span class="string">&#x27;child-one&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>CSS动画效果是通过在某一时间上自动往标签上增加一些样式实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过渡效果</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">        .<span class="property">v</span>-enter,</span><br><span class="line">        .<span class="property">v</span>-leave-to&#123;</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="property">v</span>-enter-active,</span><br><span class="line">        .<span class="property">v</span>-leave-active&#123;</span><br><span class="line">            <span class="attr">transition</span>:opacity 3s;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="comment">//弹跳效果</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="keyword">@keyframes</span> bounce-in &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="number">0%</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">                <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="number">50%</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">                <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="number">100%</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">                <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-enter-active</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">transform-origin</span>: left center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">animation</span>: bounce-in <span class="number">1s</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-leave-active</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">transform-origin</span>: left center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">animation</span>: bounce-in <span class="number">1s</span> reverse;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>ella<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配合使用css动画库</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-enter</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-leave-to</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-enter-active</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.v-leave-active</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">transition</span>:opacity <span class="number">3s</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">transition</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;transition&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        //<span class="attr">这里可以自定义入场和出场动画时长</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:duration</span>=<span class="string">&quot;&#123;enter:5000,leave:10000&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">appear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__swing v-enter-active&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__flip v-leave-active&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">appear-active-class</span>=<span class="string">&quot;animate__animated animate__flash&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>ella<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jS动画</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">transition</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">before-enter</span>=<span class="string">&quot;handleBeforeEnter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">enter</span>=<span class="string">&quot;handleEnter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">after-enter</span>=<span class="string">&quot;handleAfterEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>ella<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">handleBtnClick</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">show</span>=!<span class="variable language_">this</span>.<span class="property">show</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">handleBeforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&#x27;red&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">handleEnter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                el.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&#x27;green&#x27;</span></span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">done</span>()</span><br><span class="line">            &#125;,<span class="number">4000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">handleAfterEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//velocity库</span></span><br><span class="line"><span class="attr">handleEnter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span><br><span class="line">            <span class="title class_">Velocity</span>(el,&#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">1000</span>,<span class="attr">complete</span>:done&#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-16.b8nbj3ix1.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-17.4xuac822km.webp"                        alt="Alt text"                 ></p><p>动画封装<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-18.7ljqmkv3w4.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-19.77davpmt11.webp"                        alt="Alt text"                 ><br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-20.1ov6fkekxi.webp"                        alt="Alt text"                 ></p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><ol><li>指令语法<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-21.6f0fdz67au.webp"                        alt="Alt text"                 ></li><li>数组<br>变更方法<br>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()<br>非变更方法<br>filter(), concat(), slice()<br>reverse()和sort()调用之前创建一个原数组的副本</li><li>事件处理<br>内敛事件 方法事件</li><li>生命周期<br>不要用箭头函数，否则无法用this访问组件实例</li><li>watch侦听器</li><li>路由<br>动态路由匹配 :传递<br>routes:{}里面的的路由地址可以有相对路径，可以嵌套子路径<br>&lt;router-link to&#x3D;””&gt;&lt;&#x2F;router-link&gt;里面必须是绝对路径<br>$router.push(“”)JS实现页面跳转 ?传递<br>使用命名路由跳转的时候注意要用v-bind:to&#x3D;”{name:’’,params:{}}”</li><li>组件<br>注意data是一个函数要返回return，组件之间不共享</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>axios发送post请求会405</p><p>bind()方法主要是可以改变原本函数的this指向</p><p>ref用法<br>this.$ref.取到的是dom元素&#x2F;组件实例</p><h2 id="开发注意小知识点"><a href="#开发注意小知识点" class="headerlink" title="开发注意小知识点"></a>开发注意小知识点</h2><ol><li>&lt;router-link&gt;传参是v-bind:to<br>:to&#x3D;”{path:’&#x2F;root’,query:{id:value}}”</li><li>v-bind:class<br>以键值对的形式绑定操作</li><li>import<br><a class="link"   href="https://blog.csdn.net/qq_40323256/article/details/101867706" >https://blog.csdn.net/qq_40323256/article/details/101867706<i class="fas fa-external-link-alt"></i></a><br>注意export导出的引入要{}，export default不需要</li></ol><h2 id="前后端分离问题汇总"><a href="#前后端分离问题汇总" class="headerlink" title="前后端分离问题汇总"></a>前后端分离问题汇总</h2><p>完整逻辑<br><a class="link"   href="https://blog.csdn.net/qq_42345108/article/details/108249173" >https://blog.csdn.net/qq_42345108/article/details/108249173<i class="fas fa-external-link-alt"></i></a></p><ol><li>element UI表单 验证<br><a class="link"   href="https://blog.csdn.net/qq_41008567/article/details/115939951" >https://blog.csdn.net/qq_41008567/article/details/115939951<i class="fas fa-external-link-alt"></i></a></li><li>axios<br><a class="link"   href="https://www.axios-http.cn/docs/intro" >https://www.axios-http.cn/docs/intro<i class="fas fa-external-link-alt"></i></a><br>请求&#x2F;响应前进行拦截<br>拦截器<br>逻辑顺序<ol><li>在vue.config.js里定义devServer的代理服务器和api前缀指向<br> <img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-22.1e8cmezcs7.webp"                        alt="Alt text"                 ></li><li>然后定义utils文件夹里的request.js，在该文件里引入axios，创建axios对象和要访问的URL即前面定义的API前缀，然后定义请求和响应拦截器，最后export定义的request对象<br> <img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-23.b8nbj3iwn.webp"                        alt="Alt text"                 ></li><li>在apis文件夹里引入定义好的request对象，开始编写具体的request函数，包括后台接口的url，http协议方法，传递的参数<br> <img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-24.32hpjlpmyg.webp"                        alt="Alt text"                 ></li><li>在vue视图里引入apis里的request函数并调用，注意调用后的返回值<br>这里同样可以直接在vue组件里面使用类似下方结构来调用</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/users/payMent&quot;</span>,&#123;</span><br><span class="line">                <span class="attr">addressId</span>:addressId,</span><br><span class="line">                <span class="attr">orderTotal</span>:<span class="variable language_">this</span>.<span class="property">orderTotal</span></span><br><span class="line">              &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">                  <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">                  <span class="keyword">if</span>(res.<span class="property">status</span>==<span class="string">&quot;0&quot;</span>)&#123;</span><br><span class="line">                      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                          <span class="attr">path</span>:<span class="string">&#x27;/orderSuccess?orderId=&#x27;</span>+res.<span class="property">result</span>.<span class="property">orderId</span></span><br><span class="line">                      &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure><p>get请求参数不同<br>post<br><a class="link"   href="https://zhuanlan.zhihu.com/p/275695831" >https://zhuanlan.zhihu.com/p/275695831<i class="fas fa-external-link-alt"></i></a></p><ol start="3"><li>vuex<br>状态管理模式<br>解构简写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>([<span class="string">&#x27;nickName&#x27;</span>,<span class="string">&#x27;cartCount&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>state<br>唯一数据源，单一状态树<br>computed里面定义<br>this.$store.state.</li><li>getter<br>可以派生出一些新的状态<br>可以直接在state数据上包装而不用重新定义数据，类似数据库里视图的概念<br>this.$store.state.getters</li><li>mutation<br>更改state的唯一方法是提交mutation<br>this.$store.commit()</li><li>action<br>提交的是mutation，而不是直接变更状态<br>可以异步操作<br>调用this.$store.dispatch(“f”)<br>定义f(a){a.commit()}</li><li>module<br>将多个store对象分割成模块</li></ul><ol start="4"><li><p>this<br>this对象问题<br><a class="link"   href="https://juejin.cn/post/7109889547537743886" >https://juejin.cn/post/7109889547537743886<i class="fas fa-external-link-alt"></i></a><br>this.$<br><a class="link"   href="https://segmentfault.com/a/1190000040894587" >https://segmentfault.com/a/1190000040894587<i class="fas fa-external-link-alt"></i></a></p></li><li><p>vue插件<br>extend和component类似<br><a class="link"   href="https://juejin.cn/post/7239715295484821565" >https://juejin.cn/post/7239715295484821565<i class="fas fa-external-link-alt"></i></a></p></li><li><p>webpack<br><a class="link"   href="https://cloud.tencent.com/developer/article/1797938" >https://cloud.tencent.com/developer/article/1797938<i class="fas fa-external-link-alt"></i></a></p></li><li><p>跨域问题</p></li></ol><h2 id="echarts实战"><a href="#echarts实战" class="headerlink" title="echarts实战"></a>echarts实战</h2><h2 id="vue3部分问题解决方案"><a href="#vue3部分问题解决方案" class="headerlink" title="vue3部分问题解决方案"></a>vue3部分问题解决方案</h2><ol><li>vscode插件加载不全，重载几遍就好了</li><li>.&#x2F;APP.vue找不到<br><a class="link"   href="https://blog.csdn.net/XSL_HR/article/details/128437240" >https://blog.csdn.net/XSL_HR/article/details/128437240<i class="fas fa-external-link-alt"></i></a></li><li>router-view不渲染<br>由于没有后端支持，创建路由的history部分要用hash<br><a class="link"   href="https://blog.csdn.net/weixin_43575792/article/details/122655356" >https://blog.csdn.net/weixin_43575792/article/details/122655356<i class="fas fa-external-link-alt"></i></a></li><li>基本都是围绕setup里面响应式数据声明出的问题<br>ref和reactive<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-25.73toxztqbd.webp"                        alt="alt text"                 ><br>reactive对象赋值是深拷贝地址会变化，如果不是每个内部属性挨个赋值响应式对象，整体对象就会失去响应性，reactive返回的是对原始对象的引用，使用toRefs来解构<br>toRef是将对象的属性转化为ref对象，浅拷贝，跟原本对象的属性对应地址引用是同一个，可以修改</li><li>vuex和vue-router部分有了更新</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这份笔记主要记录的是vue2和补充vue3的语法&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue.js" scheme="http://example.com/tags/Vue-js/"/>
    
    <category term="vue2" scheme="http://example.com/tags/vue2/"/>
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>前端面试知识点汇总</title>
    <link href="http://example.com/2024/03/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2024/03/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2024-03-03T16:00:00.000Z</published>
    <updated>2024-03-08T08:16:51.689Z</updated>
    
    <content type="html"><![CDATA[<p>记录了我自己准备前端面试时复习的内容  </p><span id="more"></span><p>参考了 <a class="link"   href="https://vue3js.cn/interview/" >https://vue3js.cn/interview/<i class="fas fa-external-link-alt"></i></a></p><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML CSS"></a>HTML CSS</h2><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li>回调函数<br>嵌套 函数体在完成某种操作后由内向外调用某个外部函数<br>函数作为参数传递给另外一个函数<br>回调地狱<br>回调函数是一个this对象的方法时，必须保证this对象的上下文，Call和Apply函数来保存this</li></ol><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ol><li>var let const<br>作用域. 变量提升. 重复声明. 暂时性死区</li><li>数组新增<ol><li>… 数组变成参数序列<br> 浅拷贝 解构赋值 参数最后一位 iterator对象转成数组</li><li>构造函数 Array.from() Array.of()</li><li>实例对象方法<br> copyWithin() 复制覆盖<br> find(). findIndex() 查找<br> fill() 填充<br> entries()，keys()，values() 遍历<br> includes() 判断是否包含<br> flat()，flatMap() 扁平化（层数）</li></ol></li><li>对象新增<ol><li>简写</li><li>属性名表达式</li><li>super指向当前对象的原型对象</li><li>扩展运算符 解构赋值 浅拷贝</li><li>属性遍历 数值键-&gt;字符串键-&gt;symbol键<br> for…in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）<br> Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名<br> Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名<br> Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名<br> Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举</li><li>方法<br> Object.is() 严格相等 +0不等于-0，NaN等于自身<br> Object.assign() 对象合并 浅拷贝替换<br> Object.getOwnPropertyDescriptors()<br> Object.setPrototypeOf()，Object.getPrototypeOf()<br> Object.keys()，Object.values()，Object.entries()<br> Object.fromEntries()</li></ol></li><li>函数新增<ol><li>参数 尾参数</li><li>length name</li><li>箭头函数 参数&#x3D;&gt;返回值</li></ol></li><li>Set Map<ol><li>Set<br> add() delete() has() clear()<br> keys()：返回键名的遍历器<br> values()：返回键值的遍历器<br> entries()：返回键值对的遍历器<br> forEach()：使用回调函数遍历每个成员<br> 数组字符串去重<br> filter 并集交集差集</li><li>Map<br> set() get() has() delete() clear()<br> keys()：返回键名的遍历器<br> values()：返回键值的遍历器<br> entries()：返回所有成员的遍历器<br> forEach()：遍历 Map 的所有成员<br> weak没有遍历属性</li></ol></li><li>promise<br> Promise(function(resolve, reject) {})<br>then()<br>catch()<br>finally()<br>Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</li><li>generator<br>function关键字与函数名之间有一个星号<br>函数体内部使用yield表达式，定义不同的内部状态<br>通过next方法才会遍历，直到一个yield表达式暂停，返回值是yield表达式的值，下一次next方法继续，直到return<br>next可以带一个参数，当做一个yield表达式的返回值<br>返回的是Iterator对象，可以通过for…of进行遍历</li><li>异步处理<br>回调函数<br>Promise 对象<br>generator 函数 可以控制迭代<br>async&#x2F;await 本质上generator</li><li>proxy<br>用于创建一个对象的代理，从而实现基本操作的拦截和自定义<br>var proxy &#x3D; new Proxy(target, handler)<br>Reflect 的所有属性和方法都是静态的（ Math 对象），提供拦截 JavaScript 操作的方法<br>get() set() deleteProperty()<br>Proxy.revocable(target, handler);取消代理<br>在复杂操作前对操作进行校验或对所需资源进行管理<br>拦截和监视外部对对象的访问<br>使用 Proxy 保障数据类型的准确性<br>使用Proxy实现观察者模式，观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行</li><li>module<br>静态化 在编译时就完成模块加载<br>export：用于规定模块的对外接口<br>import：用于输入其他模块提供的功能</li><li>decorator<br>装饰器命名相当于一个注释，在不改变原有代码情况下，对类和类属性原来功能进行扩充<br>不能修饰函数</li></ol><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境<br>事件驱动、非阻塞和异步输入输出模型</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>前端<br>diff算法 深度优先算法 时间复杂度:O(n) 最小量更新<br>patch 比较虚拟DOM根节点是否同一类型，不同直接替换<br>|<br>patchVnode 进一步比较两个虚拟节点 有无text和children<br>|<br>updateChildren 都有子节点的情况下比较更新真实节点<br> 四个指针，指向oldVnode子节点列表中的第一个节点和最后一个节点以及指向newVnode子节点列表中的第一个节点和最后一个节点，节点比较过，前的指针++，后的指针–<ol><li>oldS 和 newS 使用sameVnode方法进行比较，sameVnode(oldS, newS)</li><li>oldS 和 newE 使用sameVnode方法进行比较，sameVnode(oldS, newE)，相同的话移动真实节点OE之后</li><li>oldE 和 newS 使用sameVnode方法进行比较，sameVnode(oldE, newS)，相同的话移动真实节点OS之前</li><li>oldE 和 newE 使用sameVnode方法进行比较，sameVnode(oldE, newE)</li><li>如果以上逻辑都匹配不到，再把所有旧子节点的 key 做一个映射到旧节点下标的 key -&gt; index 表，然后用新 vnode 的 key 去找出在旧节点中可以复用的位置</li><li>old先处理完，新增newS和newE之间的节点</li><li>new先处理完，删除oldS和oldE之间的节点<br>key的设置 判断两个虚拟节点是否为相同节点<br>不建议用index作为循环项的key，因为操作过程中index会改变，一些相同节点index变了会被当成新的节点，用id的话每个节点key都不同，便于更新时复用节点</li></ol></li><li>排序<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image.9nzjamuzyq.webp"                        alt="alt text"                 ></li><li>数据结构<br>数组<br>栈<br>队列<br>链表<br>树<br>图<br>堆<br>散列表  </li><li>经典算法<br><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-1.45fg3ioic.webp"                        alt="alt text"                 ></li></ol><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><ol><li><p>HTTP<br>C&#x2F;S模式 可以传输任意类型数据对象  明文传输，无身份验证 不安全<br>默认端口80<br>无连接：限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间<br>无状态：HTTP协议无法根据之前的状态进行本次的请求处理  </p></li><li><p>HTTPS<br>加密传输  让HTTP运行安全的SSL&#x2F;TLS协议(TCP&#x2F;IP 协议与应用层协议之间)上<br>默认端口443  因为加密和多次握手，性能相对较差<br>通信过程:</p><ul><li>首先客户端通过URL访问服务器建立SSL连接</li><li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端</li><li>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站</li><li>服务器利用自己的私钥解密出会话密钥</li><li>服务器利用会话密钥加密与客户端之间的通信</li></ul></li><li><p>SSL</p><ul><li>对称加密：加密和解密使用的秘钥是同一个，秘钥发送的过程中容易被窃取</li><li>非对称加密：有公钥和私钥，公钥加密后只能用私钥解密，私钥加密后也只能用公钥解密  </li><li>混合加密：<br> 发送者用会话密钥加密消息（对称），用公钥加密的会话密钥（非对称），两个一起发送<br> 消息接收者用自己的私钥解密出会话密钥，用会话密钥解密消息</li></ul><p> 摘要算法：<br> 会话密钥 对称的 明文和摘要一起加密<br> 验证信息的完整性  散列函数、哈希函数<br> 把消息数据转化成一个特殊字符串，接收者比对接收到的明文计算出的消息摘要和接收到的信息摘要  </p><p> 数字签名：<br> 公私钥 非对称  身份验证<br> 摘要私钥加密成数字签名，公钥解开后再比对原文验证  </p><p> CA验证机构:<br>     1. 服务器有一套公钥和私钥，把公钥发给CA机构<br>     2. CA机构用机构私钥给服务器公钥署数字签名，颁发公钥证书(服务器公钥+数字签名)<br>     3. 浏览器中预设了机构公钥，客户端拿到服务器的公钥证书，可以自行解密数字签名，得到服务器公钥，跟公钥证书比对<br>     4. 客户端用服务器公钥加密报文，服务器用服务器私钥解密</p></li><li><p>UDP</p></li><li><p>TCP</p></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><img                         lazyload                       alt="image"                       data-src="https://ellaaaaaaaaaaa.github.io/picx-images-hosting/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/image-2.6bgtg9efmh.webp"                        alt="alt text"                 ></p><h2 id="echarts可视化"><a href="#echarts可视化" class="headerlink" title="echarts可视化"></a>echarts可视化</h2><p>最重要的就是id问题，不能重复</p><ol><li>provide inject导入echarts对象</li><li>获取后端数据</li><li>onMounted里初始化渲染，因为要获取dom元素</li><li>看文档setOption，notMerge: true</li><li>自适应大小window.onresize &#x3D; function () {myChart1.resize();}</li><li>放echarts的容器要预先设置大小才会渲染</li></ol><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录了我自己准备前端面试时复习的内容  &lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
